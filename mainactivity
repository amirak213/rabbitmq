package com.example.trm

import android.Manifest
import android.os.Bundle
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import com.rabbitmq.client.*
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import java.nio.charset.StandardCharsets
import android.content.Context
import android.content.pm.PackageManager
import android.view.View
import android.widget.Button
import androidx.core.app.ActivityCompat
import com.example.trm.R
import java.sql.DriverManager.println


class MainActivity : AppCompatActivity() {
    var lg_button : Button?= null
    private lateinit var fusedLocationClient: FusedLocationProviderClient

    override fun onCreate(savedInstanceState: Bundle?) {

        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        lg_button = findViewById<Button>(R.id.lg_button)
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(applicationContext)

        GlobalScope.launch() {
            // produce();
            //consumer();

            getLastKnownLocation();


        }
    }



    fun onClick(v: View?) {

        fun produce(position: String) {

        }
        when(v?.id){


            R.id.lg_button -> {

            

    fun getLastKnownLocation() {
        if (ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.ACCESS_COARSE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            // TODO: Consider calling
            //    ActivityCompat#requestPermissions
            // here to request the missing permissions, and then overriding
            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
            //                                          int[] grantResults)
            // to handle the case where the user grants the permission. See the documentation
            // for ActivityCompat#requestPermissions for more details.
            return
        }
        fusedLocationClient.lastLocation
            .addOnSuccessListener { location->
                if (location != null) {
                    var position = " ${location.latitude}  : ${location.longitude}"
                    println(  " ${location.latitude}  : ${location.longitude}" )
                    produce(position)
                }

            }

    }



    fun produce(message : String) {
        val factory = ConnectionFactory()
        factory.host = "192.168.208.21"
        factory.username = "test"
        factory.password = "test"
        val connection: Connection = factory.newConnection()
        val channel: Channel = connection.createChannel()

        channel.basicPublish("", "gps_positions", null, message.toByteArray())

        println(" [x] Sent" + "'")
        channel.close()
        connection.close()

    }
    fun consumer() {
        val factory = ConnectionFactory()
        factory.host = "192.168.208.21"
        factory.username = "test"
        factory.password = "test"
        val connection: Connection = factory.newConnection()
        val channel: Channel = connection.createChannel()

        val consumerTag = "SimpleConsumer"

        channel.queueDeclare("gps_positions", false, false, false, null)

        println("[$consumerTag] Waiting for messages...")
        val deliverCallback = DeliverCallback { consumerTag: String?, delivery: Delivery ->
            val message = String(delivery.body, StandardCharsets.UTF_8)
            println("[$consumerTag] Received message: '$message'")
        }
        val cancelCallback = CancelCallback { consumerTag: String? ->
            println("[$consumerTag] was canceled")
        }

        val testq = ""
        channel.basicConsume(testq, true, consumerTag, deliverCallback, cancelCallback)
    }

            }
        }

    }
}

